"use strict";
// A lot of these might be replaced with FoundryVTT types when they're updated.
// Leave them as general guard rails for now.
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLCtFQUErRTtBQUMvRSw2Q0FBNkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIGxvdCBvZiB0aGVzZSBtaWdodCBiZSByZXBsYWNlZCB3aXRoIEZvdW5kcnlWVFQgdHlwZXMgd2hlbiB0aGV5J3JlIHVwZGF0ZWQuXHJcbi8vIExlYXZlIHRoZW0gYXMgZ2VuZXJhbCBndWFyZCByYWlscyBmb3Igbm93LlxyXG5cclxuaW1wb3J0IHtXcmF0aEFuZEdsb3J5SXRlbX0gZnJvbSBcIi4uL2NvbW1vbi9pdGVtXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNraWxsIHtcclxuICAgIHRvdGFsOiBudW1iZXJcclxuICAgIGJvbnVzOiBudW1iZXJcclxuICAgIHJhdGluZzogbnVtYmVyXHJcbiAgICBhdHRyaWJ1dGU6IHN0cmluZ1xyXG4gICAgY29zdDogbnVtYmVyXHJcbiAgICBpc0xlZnQ6IGJvb2xlYW5cclxuICAgIGlzUmlnaHQ6IGJvb2xlYW5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBdHRyaWJ1dGUge1xyXG4gICAgdG90YWw6IG51bWJlclxyXG4gICAgYm9udXM6IG51bWJlclxyXG4gICAgcmF0aW5nOiBudW1iZXJcclxuICAgIGNvc3Q6IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbWJhdCB7XHJcbiAgICByZXNpbGVuY2U6IHtcclxuICAgICAgICB0b3RhbDogbnVtYmVyXHJcbiAgICAgICAgYXJtb3I6IG51bWJlclxyXG4gICAgICAgIGJvbnVzOiBudW1iZXJcclxuICAgIH1cclxuICAgIHBhc3NpdmVBd2FyZW5lc3M6IHtcclxuICAgICAgICB0b3RhbDogbnVtYmVyXHJcbiAgICAgICAgYm9udXM6IG51bWJlclxyXG4gICAgfVxyXG4gICAgZGVmZW5zZToge1xyXG4gICAgICAgIHRvdGFsOiBudW1iZXJcclxuICAgICAgICBib251czogbnVtYmVyXHJcbiAgICB9XHJcbiAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgdG90YWw6IG51bWJlclxyXG4gICAgICAgIGJvbnVzOiBudW1iZXJcclxuICAgIH1cclxuICAgIHdvdW5kczoge1xyXG4gICAgICAgIG1heDogbnVtYmVyXHJcbiAgICAgICAgYm9udXM6IG51bWJlclxyXG4gICAgfVxyXG4gICAgZGV0ZXJtaW5hdGlvbjoge1xyXG4gICAgICAgIHRvdGFsOiBudW1iZXJcclxuICAgICAgICBib251czogbnVtYmVyXHJcbiAgICB9XHJcbiAgICBzaG9jazoge1xyXG4gICAgICAgIG1heDogbnVtYmVyXHJcbiAgICAgICAgYm9udXM6IG51bWJlclxyXG4gICAgfVxyXG4gICAgc2l6ZTogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YSB7XHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIHR5cGU6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJvbGxEYXRhIHtcclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgc2tpbGxOYW1lOiBzdHJpbmdcclxuICAgIHJhbms6IG51bWJlclxyXG4gICAgZGlmZmljdWx0eToge1xyXG4gICAgICAgIHRhcmdldDogbnVtYmVyXHJcbiAgICAgICAgcGVuYWx0eTogbnVtYmVyXHJcbiAgICAgICAgcmFuazogc3RyaW5nXHJcbiAgICB9XHJcbiAgICBwb29sOiB7XHJcbiAgICAgICAgc2l6ZTogbnVtYmVyXHJcbiAgICAgICAgYm9udXM6IG51bWJlclxyXG4gICAgICAgIHJhbms6IHN0cmluZ1xyXG4gICAgfVxyXG4gICAgd3JhdGg6IHtcclxuICAgICAgICBiYXNlOiBudW1iZXJcclxuICAgICAgICBpc1dlYXBvbjogYm9vbGVhblxyXG4gICAgICAgIGlzQ29tbW9uOiBib29sZWFuXHJcbiAgICAgICAgaXNQc3k6IGJvb2xlYW5cclxuICAgIH1cclxuICAgIGRuOiBudW1iZXJcclxuICAgIHdlYXBvbjoge1xyXG4gICAgICAgIHRyYWl0czogYW55XHJcbiAgICAgICAgZGFtYWdlOiB7XHJcbiAgICAgICAgICAgIGJhc2U6IG51bWJlclxyXG4gICAgICAgICAgICBib251czogbnVtYmVyXHJcbiAgICAgICAgICAgIHJhbms6IHN0cmluZ1xyXG4gICAgICAgIH1cclxuICAgICAgICBlZDoge1xyXG4gICAgICAgICAgICBiYXNlOiBudW1iZXJcclxuICAgICAgICAgICAgYm9udXM6IG51bWJlclxyXG4gICAgICAgICAgICByYW5rOiBzdHJpbmdcclxuICAgICAgICAgICAgZGllOiBEaWVPcHRpb25zXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFwOiB7XHJcbiAgICAgICAgICAgIGJhc2U6IG51bWJlclxyXG4gICAgICAgICAgICBib251czogbnVtYmVyXHJcbiAgICAgICAgICAgIHJhbms6IHN0cmluZ1xyXG4gICAgICAgICAgICB0b3RhbD86IG51bWJlclxyXG4gICAgICAgIH1cclxuICAgICAgICBwb3RlbmN5OiBzdHJpbmdcclxuICAgIH1cclxuICAgIHJlc3VsdDoge1xyXG4gICAgICAgIGlzU3VjY2VzczogYm9vbGVhblxyXG4gICAgICAgIGlzV3JhdGhDcml0aWNhbDogYm9vbGVhblxyXG4gICAgICAgIGlzV3JhdGhDb21wbGljYXRpb246IGJvb2xlYW5cclxuICAgICAgICB3cmF0aDogbnVtYmVyXHJcbiAgICAgICAgZGljZTogQXJyYXk8RGllPlxyXG4gICAgICAgIGRhbWFnZToge1xyXG4gICAgICAgICAgICBkaWNlOiBBcnJheTxEaWU+XHJcbiAgICAgICAgICAgIHRvdGFsOiBudW1iZXJcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VjY2VzczogbnVtYmVyXHJcbiAgICAgICAgZmFpbHVyZTogbnVtYmVyXHJcbiAgICAgICAgc2hpZnRpbmc6IG51bWJlclxyXG4gICAgfVxyXG4gICAgcm9sbHM6IHtcclxuICAgICAgICBoaXQ6IEFycmF5PFJvbGw+XHJcbiAgICAgICAgZGFtYWdlOiBBcnJheTxSb2xsPlxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpZU9wdGlvbnMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHtcclxuICAgIG9uZTogbnVtYmVyXHJcbiAgICB0d286IG51bWJlclxyXG4gICAgdGhyZWU6IG51bWJlclxyXG4gICAgZm91cjogbnVtYmVyXHJcbiAgICBmaXZlOiBudW1iZXJcclxuICAgIHNpeDogbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGllIHtcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIHZhbHVlOiBudW1iZXIsXHJcbiAgICBzY29yZTogbnVtYmVyLFxyXG4gICAgaXNXcmF0aDogYm9vbGVhblxyXG4gICAgcmVyb2xsYWJsZTogYm9vbGVhblxyXG4gICAgd2VpZ2h0OiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaGF0RGF0YSB7XHJcbiAgICB1c2VyOiBzdHJpbmdcclxuICAgIHJvbGxNb2RlOiBzdHJpbmdcclxuICAgIGNvbnRlbnQ6IEh0bWxcclxuICAgIHdoaXNwZXI/OiBBcnJheTxzdHJpbmc+XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG9rZW5EYXRhIHtcclxuICAgIGFjdG9ySWQ6IHN0cmluZyB8IG51bGxcclxuICAgIGFjdG9yTGluazogc3RyaW5nXHJcbiAgICBhY3RvckRhdGE6IHtcclxuICAgICAgICBkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PlxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNjZW5lIHtcclxuICAgIHRva2VuczogQXJyYXk8VG9rZW4+XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSHRtbCB7XHJcbiAgICBmaW5kOiAoXzogc3RyaW5nKSA9PiBhbnlcclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgY2xhc3MgUm9sbCB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoZm9ybXVsYTogc3RyaW5nLCBvcHRzPzoge30pXHJcblxyXG4gICAgICAgIHB1YmxpYyB0ZXJtczogQXJyYXk8e1xyXG4gICAgICAgICAgICByZXN1bHRzOiBBcnJheTx7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IG51bWJlclxyXG4gICAgICAgICAgICB9PlxyXG4gICAgICAgIH0+XHJcblxyXG4gICAgICAgIHB1YmxpYyB0b3RhbDogbnVtYmVyXHJcbiAgICAgICAgcHVibGljIGV2YWx1YXRlKCk6IFJvbGxcclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBBY3RvciB7XHJcbiAgICAgICAgcHVibGljIGRhdGE6IGFueVxyXG4gICAgICAgIHB1YmxpYyB0eXBlOiBhbnlcclxuICAgICAgICBwdWJsaWMgaXRlbXM6IEFycmF5PFdyYXRoQW5kR2xvcnlJdGVtPlxyXG5cclxuICAgICAgICBwdWJsaWMgcHJlcGFyZURhdGEoKTogYW55XHJcbiAgICB9XHJcblxyXG4gICAgY2xhc3MgVG9rZW4ge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKF86IFRva2VuRGF0YSlcclxuXHJcbiAgICAgICAgYWN0b3I6IEFjdG9yXHJcbiAgICAgICAgZGF0YTogYW55XHJcbiAgICB9XHJcblxyXG4gICAgY2xhc3MgRGlhbG9nIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcihfOiBhbnksIF9fOiBhbnkpXHJcblxyXG4gICAgICAgIHB1YmxpYyByZW5kZXIoXzogYm9vbGVhbik6IHZvaWRcclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBJdGVtIHtcclxuICAgICAgICBwdWJsaWMgZGF0YTogYW55XHJcbiAgICAgICAgcHVibGljIHR5cGU6IGFueVxyXG4gICAgICAgIF9pZDogc3RyaW5nXHJcbiAgICB9XHJcblxyXG4gICAgdHlwZSBFdmVudCA9IGFueVxyXG5cclxuICAgIGNvbnN0ICQ6IGFueVxyXG4gICAgY29uc3QgQ09OU1Q6IGFueVxyXG4gICAgY29uc3QgQ09ORklHOiBhbnlcclxuICAgIGNvbnN0IEhvb2tzOiBhbnlcclxuICAgIGNvbnN0IGdhbWU6IGFueVxyXG4gICAgY29uc3QgdWk6IGFueVxyXG4gICAgY29uc3QgZm91bmRyeTogYW55XHJcbiAgICBjb25zdCBjb25zb2xlOiBhbnlcclxuICAgIGNvbnN0IEFjdG9yczogYW55XHJcbiAgICBjb25zdCBJdGVtczogYW55XHJcbiAgICBjb25zdCBJdGVtU2hlZXQ6IGFueVxyXG4gICAgY29uc3QgQWN0b3JTaGVldDogYW55XHJcbiAgICBjb25zdCBDaGF0TWVzc2FnZTogYW55XHJcbiAgICBjb25zdCBIYW5kbGViYXJzOiB7XHJcbiAgICAgICAgcmVnaXN0ZXJIZWxwZXI6IChfOiBzdHJpbmcsIF9fOiAoXzogYm9vbGVhbikgPT4gc3RyaW5nKSA9PiB2b2lkXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVuZGVyVGVtcGxhdGUoXzogc3RyaW5nLCBfXzogdW5rbm93bik6IGFueVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWRUZW1wbGF0ZXMoXzogQXJyYXk8c3RyaW5nPik6IHZvaWRcclxuXHJcbiAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KF86IGFueSk6IGJvb2xlYW5cclxuXHJcbiAgICBmdW5jdGlvbiBtZXJnZU9iamVjdChfOiBhbnksIF9fOiBhbnksIG9wdHM/OiB7IGVuZm9yY2VUeXBlczogYm9vbGVhbiwgaW5wbGFjZTogYm9vbGVhbiB9KTogYW55XHJcblxyXG4gICAgZnVuY3Rpb24gZXhwYW5kT2JqZWN0KF86IGFueSk6IHZvaWRcclxufVxyXG5cclxuIl19