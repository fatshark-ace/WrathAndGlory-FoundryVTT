"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentSheet = void 0;
const actor_js_1 = require("./actor.js");
class AgentSheet extends actor_js_1.WrathAndGloryActorSheet {
    static get defaultOptions() {
        return mergeObject(super.defaultOptions, {
            classes: ["wrath-and-glory", "sheet", "actor"],
            template: "systems/wrath-and-glory/template/sheet/agent.html",
            width: 720,
            height: 800,
            resizable: false,
            tabs: [
                {
                    navSelector: ".sheet-tabs",
                    contentSelector: ".sheet-body",
                    initial: "main",
                },
            ]
        });
    }
    getData() {
        const data = super.getData();
        return data;
    }
    activateListeners(html) {
        super.activateListeners(html);
        html.find(".item-cost").focusout(async (ev) => { await this._onItemCostFocusOut(ev); });
    }
    _getHeaderButtons() {
        let buttons = super._getHeaderButtons();
        if (this.actor.isOwner) {
            buttons = [].concat(buttons);
        }
        return buttons;
    }
    async _onItemCostFocusOut(event) {
        event.preventDefault();
        const div = $(event.currentTarget).parents(".item");
        let item = this.actor.items.get(div.data("itemId"));
        const value = parseInt($(event.currentTarget)[0].value, 10);
        let data = { _id: item.id, "data.cost": value };
        await this.actor.updateEmbeddedDocument("Item", data);
        this._render(true);
    }
}
exports.AgentSheet = AgentSheet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hlZXQvYWdlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQXFEO0FBR3JELE1BQWEsVUFBVyxTQUFRLGtDQUF1QjtJQUVuRCxNQUFNLEtBQUssY0FBYztRQUNyQixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFO1lBQ3JDLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7WUFDOUMsUUFBUSxFQUFFLG1EQUFtRDtZQUM3RCxLQUFLLEVBQUUsR0FBRztZQUNWLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLEtBQUs7WUFDaEIsSUFBSSxFQUFFO2dCQUNGO29CQUNJLFdBQVcsRUFBRSxhQUFhO29CQUMxQixlQUFlLEVBQUUsYUFBYTtvQkFDOUIsT0FBTyxFQUFFLE1BQU07aUJBQ2xCO2FBQ0o7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsT0FBTztRQUNILE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBR0QsaUJBQWlCLENBQUMsSUFBVTtRQUN4QixLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQVMsRUFBRSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRyxDQUFDO0lBRUQsaUJBQWlCO1FBQ2IsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDeEMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNwQixPQUFPLEdBQUcsRUFDVCxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNyQjtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFRCxLQUFLLENBQUMsbUJBQW1CLENBQUMsS0FBWTtRQUNsQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEQsSUFBSSxJQUFJLEdBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNyRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUQsSUFBSSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDaEQsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDSjtBQWhERCxnQ0FnREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXcmF0aEFuZEdsb3J5QWN0b3JTaGVldCB9IGZyb20gXCIuL2FjdG9yLmpzXCI7XG5pbXBvcnQge0h0bWx9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgQWdlbnRTaGVldCBleHRlbmRzIFdyYXRoQW5kR2xvcnlBY3RvclNoZWV0IHtcblxuICAgIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgICAgICAgY2xhc3NlczogW1wid3JhdGgtYW5kLWdsb3J5XCIsIFwic2hlZXRcIiwgXCJhY3RvclwiXSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcInN5c3RlbXMvd3JhdGgtYW5kLWdsb3J5L3RlbXBsYXRlL3NoZWV0L2FnZW50Lmh0bWxcIixcbiAgICAgICAgICAgIHdpZHRoOiA3MjAsXG4gICAgICAgICAgICBoZWlnaHQ6IDgwMCxcbiAgICAgICAgICAgIHJlc2l6YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0YWJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYXZTZWxlY3RvcjogXCIuc2hlZXQtdGFic1wiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50U2VsZWN0b3I6IFwiLnNoZWV0LWJvZHlcIixcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbDogXCJtYWluXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHN1cGVyLmdldERhdGEoKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG5cbiAgICBhY3RpdmF0ZUxpc3RlbmVycyhodG1sOiBIdG1sKSB7XG4gICAgICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpO1xuICAgICAgICBodG1sLmZpbmQoXCIuaXRlbS1jb3N0XCIpLmZvY3Vzb3V0KGFzeW5jIChldjogRXZlbnQpID0+IHsgYXdhaXQgdGhpcy5fb25JdGVtQ29zdEZvY3VzT3V0KGV2KTsgfSk7XG4gICAgfVxuXG4gICAgX2dldEhlYWRlckJ1dHRvbnMoKSB7XG4gICAgICAgIGxldCBidXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKTtcbiAgICAgICAgaWYgKHRoaXMuYWN0b3IuaXNPd25lcikge1xuICAgICAgICAgICAgYnV0dG9ucyA9IFtcbiAgICAgICAgICAgIF0uY29uY2F0KGJ1dHRvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidXR0b25zO1xuICAgIH1cblxuICAgIGFzeW5jIF9vbkl0ZW1Db3N0Rm9jdXNPdXQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IGRpdiA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cyhcIi5pdGVtXCIpO1xuICAgICAgICBsZXQgaXRlbSAgPSB0aGlzLmFjdG9yLml0ZW1zLmdldChkaXYuZGF0YShcIml0ZW1JZFwiKSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VJbnQoJChldmVudC5jdXJyZW50VGFyZ2V0KVswXS52YWx1ZSwgMTApO1xuICAgICAgICBsZXQgZGF0YSA9IHsgX2lkOiBpdGVtLmlkLCBcImRhdGEuY29zdFwiOiB2YWx1ZSB9O1xuICAgICAgICBhd2FpdCB0aGlzLmFjdG9yLnVwZGF0ZUVtYmVkZGVkRG9jdW1lbnQoXCJJdGVtXCIsIGRhdGEpO1xuICAgICAgICB0aGlzLl9yZW5kZXIodHJ1ZSk7XG4gICAgfVxufVxuIl19