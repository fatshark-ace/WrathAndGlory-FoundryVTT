"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThreatSheet = void 0;
const actor_js_1 = require("./actor.js");
class ThreatSheet extends actor_js_1.WrathAndGloryActorSheet {
    static get defaultOptions() {
        return mergeObject(super.defaultOptions, {
            classes: ["wrath-and-glory", "sheet", "actor"],
            template: "systems/wrath-and-glory/template/sheet/threat.html",
            width: 720,
            height: 800,
            resizable: false,
            tabs: [
                {
                    navSelector: ".sheet-tabs",
                    contentSelector: ".sheet-body",
                    initial: "main",
                },
            ]
        });
    }
    getData() {
        const data = super.getData();
        return data;
    }
    activateListeners(html) {
        super.activateListeners(html);
        html.find(".item-cost").focusout(async (ev) => { await this._onItemCostFocusOut(ev); });
    }
    _getHeaderButtons() {
        let buttons = super._getHeaderButtons();
        if (this.actor.owner) {
            buttons = [].concat(buttons);
        }
        return buttons;
    }
    async _onItemCostFocusOut(event) {
        event.preventDefault();
        const div = $(event.currentTarget).parents(".item");
        let item = this.actor.items.get(div.data("itemId"));
        const value = parseInt($(event.currentTarget)[0].value, 10);
        let data = { _id: item.id, "data.cost": value };
        await this.actor.updateEmbeddedDocument("Item", data);
        this._render(true);
    }
}
exports.ThreatSheet = ThreatSheet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NoZWV0L3RocmVhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5Q0FBcUQ7QUFHckQsTUFBYSxXQUFZLFNBQVEsa0NBQXVCO0lBRXBELE1BQU0sS0FBSyxjQUFjO1FBQ3JCLE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUU7WUFDckMsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQztZQUM5QyxRQUFRLEVBQUUsb0RBQW9EO1lBQzlELEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsS0FBSztZQUNoQixJQUFJLEVBQUU7Z0JBQ0Y7b0JBQ0ksV0FBVyxFQUFFLGFBQWE7b0JBQzFCLGVBQWUsRUFBRSxhQUFhO29CQUM5QixPQUFPLEVBQUUsTUFBTTtpQkFDbEI7YUFDSjtTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxPQUFPO1FBQ0gsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFHRCxpQkFBaUIsQ0FBQyxJQUFVO1FBQ3hCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBUyxFQUFFLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25HLENBQUM7SUFFRCxpQkFBaUI7UUFDYixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ2xCLE9BQU8sR0FBRyxFQUNULENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxLQUFZO1FBQ2xDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRCxJQUFJLElBQUksR0FBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1RCxJQUFJLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUNoRCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXRELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkIsQ0FBQztDQUNKO0FBakRELGtDQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdyYXRoQW5kR2xvcnlBY3RvclNoZWV0IH0gZnJvbSBcIi4vYWN0b3IuanNcIjtcbmltcG9ydCB7SHRtbH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBUaHJlYXRTaGVldCBleHRlbmRzIFdyYXRoQW5kR2xvcnlBY3RvclNoZWV0IHtcblxuICAgIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgICAgICAgY2xhc3NlczogW1wid3JhdGgtYW5kLWdsb3J5XCIsIFwic2hlZXRcIiwgXCJhY3RvclwiXSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcInN5c3RlbXMvd3JhdGgtYW5kLWdsb3J5L3RlbXBsYXRlL3NoZWV0L3RocmVhdC5odG1sXCIsXG4gICAgICAgICAgICB3aWR0aDogNzIwLFxuICAgICAgICAgICAgaGVpZ2h0OiA4MDAsXG4gICAgICAgICAgICByZXNpemFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdGFiczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmF2U2VsZWN0b3I6IFwiLnNoZWV0LXRhYnNcIixcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFNlbGVjdG9yOiBcIi5zaGVldC1ib2R5XCIsXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWw6IFwibWFpblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldERhdGEoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBzdXBlci5nZXREYXRhKCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuXG4gICAgYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbDogSHRtbCkge1xuICAgICAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKTtcbiAgICAgICAgaHRtbC5maW5kKFwiLml0ZW0tY29zdFwiKS5mb2N1c291dChhc3luYyAoZXY6IEV2ZW50KSA9PiB7IGF3YWl0IHRoaXMuX29uSXRlbUNvc3RGb2N1c091dChldik7IH0pO1xuICAgIH1cblxuICAgIF9nZXRIZWFkZXJCdXR0b25zKCkge1xuICAgICAgICBsZXQgYnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKCk7XG4gICAgICAgIGlmICh0aGlzLmFjdG9yLm93bmVyKSB7XG4gICAgICAgICAgICBidXR0b25zID0gW1xuICAgICAgICAgICAgXS5jb25jYXQoYnV0dG9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1dHRvbnM7XG4gICAgfVxuXG4gICAgYXN5bmMgX29uSXRlbUNvc3RGb2N1c091dChldmVudDogRXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgZGl2ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKFwiLml0ZW1cIik7XG4gICAgICAgIGxldCBpdGVtICA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KGRpdi5kYXRhKFwiaXRlbUlkXCIpKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUludCgkKGV2ZW50LmN1cnJlbnRUYXJnZXQpWzBdLnZhbHVlLCAxMCk7XG4gICAgICAgIGxldCBkYXRhID0geyBfaWQ6IGl0ZW0uaWQsIFwiZGF0YS5jb3N0XCI6IHZhbHVlIH07XG4gICAgICAgIGF3YWl0IHRoaXMuYWN0b3IudXBkYXRlRW1iZWRkZWREb2N1bWVudChcIkl0ZW1cIiwgZGF0YSk7XG5cbiAgICAgICAgdGhpcy5fcmVuZGVyKHRydWUpO1xuICAgIH1cbn1cbiJdfQ==